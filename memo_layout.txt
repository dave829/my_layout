프로젝트 레이아웃 잡는법>

=================================


기본세팅>

--

일단,

-설치 하고  
-폴더 구조 짜서 만들어놓고,

-예를들어 , 기본 html css js 만 가지고,
렌딩 페이지 만든다 치면,

---

-html 부분부터 보자면,
기본 느낌표 탭으로 만들고,
기본 메타 설정 해주고

그다음 , 
>폰트 설정이다.

디자이너가 준 디자인 시안을 보면서,
폰트 부터 가져온다.
디자인 시안을 보니, 폰트가 
즉,
이 디자인 시안에서,
*몇개의 폰트 사용하는지,
*각각의 폰트에서 
폰트 weight은 어떤것들 사용하는지,
파악 후,
필요한 폰트는 임포트 해주면 된다.

예를들어,

이 시안은 지금,

기본적으로

DM Sans Bold 700
DM Sans Regular 400
을 사용하고있고,

버튼을 보니까,
버튼안에 텍스트도 
Bold 사용하고 있고,

다 전체적으로 
보고 

DM Sans를 쓰네 
하면서
확인 을 해본다.
다 파악했으면,

DM Sans Bold 700
DM Sans Regular 400
구나 하면,

구글 폰트에서
찾아서
임포트 해준다.

메타에 임포트하고,
css파일도 링크 걸어주고,

---

-css 부분이다.

css파일에서는,

기본적으로, 
설정은,


* {
    box-sizing: border-box;
    margin: 0;
}

해주고,

그담은,
임포트한 폰트를 적용해줘야된다.
어디에 ? body 에.

body {
    font-family: "DM Sans", sans-serif;

}

여기까지 하면,
폰트 적용까지 
끝,

-----

그다음은,
기본 css 설정을 계속 하자면,
즉, 구린 기본 효과들, 
뭐 li태그 점이나,
a태그 파란색 이런거 
세팅해서 없애주는 작업이다.

eric meyer 라는 사람의
reset css라는 것도 유명하다.
여튼,
 그대상 요소는,
html 요소중 에서,

<a>

<button>

<textarea>

<input />

<ul> <ol>
    <li> 

이다. 

여튼,

css 로 가서 설정하면,

a {
    color: inherit; 인헤릿은 상속받다는 뜻, 즉 a의 부모의 색을 상속 받아라임.
    text-decoration: none; 
}

button {
    버튼에 글자는 
    폰트 설정이 안 먹는다.
    그래서,
    한번 더 명시적으로 적어주는게 좋다.

}

그래서,

button,
input,
textarea {
    font-family: "DM Sans", sans-serif;
    font-size: 16px;


}
한꺼번에 ~!
서언해준다.

그리고 
버튼,인풋,텍스트에어리아 
클릭시 보더 파란색 은,

button:focus,
button:active,
input:focus,
input:active,
textarea:focus,
textarea:active {
    box-shadow: none;
    outline: none;

}
이렇게 해주면됨.

ul,
ol,
li {
    list-style-type: none;
    padding-left: 0;
    margin-left:0;
    패딩 마진은 옆에 공간이 생겨서 0으로 처리해준것이다.
}

이렇게 기본 설정 해주고,
필요한건 그떄 그때 추가해주면 됨.


--

그담은,

보통
디자인 시안에
메뉴얼? 이 적혀져 있어야하는데,
이런거,

-maximum container 사이즈는 960px 입니다.

-모바일 시안과 데스크탑 시안의 중단점 
Breakpoint는 768px 입니다.

-이미지 파일 같은거 첨부 되있고

이렇게 기본적으로 명시된 거 
작업 해주면된다.

예를들면,

max container width 는,

-Extra small : auto 
(<576px 일때, )


-Small : 540px
(>= 576px)

-Medium : 720px;

-Large : 960px;

이렇게 대충 정해져 있다.

---

그러면,

폰트 기본 임포트 후에는,

디자이너가 정해준,
-maximum container 사이즈는 960px 입니다.
이거를 일단 설정은 해야한다.

반응형 설정을
넓이  설정만 
해놓도록 한다.

css 에서,

@media screen and (min-width: 1200px) {
    .container {
        max-width: 960px;
    }
}

이런식으로
해준다.

-maximum container 사이즈는 960px 입니다.
이 부분은 완료.

---

그다음은,


본문 폰트 사이즈를 설정 해줘야 하는데,

p 태그 
즉, 문단에서 쓰는 사이즈를 확인해야한다.
즉,

모바일일때 사이즈랑 
아닐떄랑 사이즈를 다르게 설정 해줘야함.

일단, 시안에,

p 태그 모바일 사이즈를 보면,
p 태그 텍스트는

font-size 16px 에 
line height 24px
letter spacing -1% 
이다.

그래서,

p {
    font-size: 16px;
    line-height: 1.5; 
    라인 하이트는 위에 24px 이었으니, 24 / 16 하면 1.5 임 
    color: 시안의 색을 넣으면 된다. 
    letter-space: -0.01em;
}

근데,

데스크탑 사이즈 는
또 다르다,
즉,
모바일 사이즈를 
디폴트 사이즈로 설정을 해두고,

/* > 768px (Desktop) */
@media screen and (min-width: 768px) {
        p {
        font-size: 22px;
        line-height: 1.363636; 
        라인 하이트는 시안에보니 30px 이었으니, 30 / 22 하면 1.363636 임 
        color: 시안의 색을 넣으면 된다. 
        
     }
}

이렇게 데스크 탑 사이즈 는 
미디어 쿼리로 
반응형 설정을 해두는게 
편한 방법일 수 있다.

요까지가,

html / css 
기본 설정 이라고 볼 수 있겠고.

-------------

그 다음은,

레이아웃 작업이 들어가는건데,

일단,

봐야할것은,

반응형,
모바일때랑, 
데스크 탑때랑,
레이아웃이 
어떻게 바뀌는지를 봐야한다.

그래야 그리드 시스템을 어떻게 적용할지
대략 감을 잡을 수 있기 떄문이다.

일단,
모바일 때는,

예를들면,

전체 영역 다 쓰고있고,
즉, 12칸 다 쓰고있다.

데스크 탑도, 거의 똑같다.
그냥 전체를 하나의 컬럼으로 감싸서 작업 하면 되겠다.

이렇게 파악이 끝나고,

html 마크업 작업 부터 한다.

일단,

이 페이지 부분이 스크롤 되서 
섹션으로 나누어서 작업 해야되면,

<section> 태그로 감싸는게 좋다.

section 만들고,
그안에,
<div> .container 만들고,
안에 <div> .row 만든다
그 안에 <div> .col-12 만든다, 즉, 컬럼 12칸.
그 컬럼 안에 

위에서 아래 방향으로 작업 하면 되는데,

h1 해서 제목 만들어놓고
p 문장 만들고 
버튼 2개 만들고,

버튼은 2개이니까,
지금 양옆으로 가로배치이니까,

묶어줄 수 있는 부모 하나 만들고,
안에 버튼 넣어서 
flex로 가운데 배치 시키고.

버튼이 지금,
눌럿을때, 
다른 페이지로 이동을 하니까,
a 태그로 작업 을 하면 되겠다.
이렇게 되는거고,

이렇게 판단 하고 
레이아웃 작업을 하면 된다.

버튼 마저 만들면,

부모 div 만들고,
안에 
button 2개 

그 다음,

텍스트 보면,
줄 바꿈 되는 거 
확인해보고,

<br /> 태그 
적용할 곳 적용 시키고.

그리고,

태그, 요소 마다 
클래스나 아이디 달고,
작업하면됨.

버튼은,

fill-button 이라는 클래스 주고,

옆에 버튼은 
fill-button inverted 
이라고 작명 해서

효과를 안주는 버튼이라고 작명을해서 
클래스를 준다.

요렇게 
이까지 해서,

지금까지 한거는,

-메타 설정
-css 기본 설정 
-html 작업 + 클래스 이름주기
이다.

아무튼,

html 작업중, 
한 섹션의 작업을
해놓고,

--

참고로,
디자인 시안 보고 
작업 하실떄,
데스크탑 신경쓰지말고,
그냥 모바일만 보고 만드세요,

그리고 모바일 완성하고,
미디어쿼리로,
데스크탑을 처리하는 식으로 하는게 
저는 좀더 나은것 같습니다.

--

그 섹션 부분의
스타일 작업,
즉,
css 부분으로 넘어간다.

css에서는,

지금 위에 섹션 부분 작명이 
.landing 
이니까,

/* Landing */ 

해서, 
주석 처리 하고,

밑에 스타일 하면 된다.

-

일단은,

배경색 부터 줍니다.

배경색은 
section 한테 
즉, .landing 한테 
주는게 좋겠죠.
background-color 주시고,

그다음 보이는건,

landing-title 이죠
시안 보면

폰트 사이즈 40px
라인 하이트 40
레터 스페이싱 -5
네요.
컬러도 확인해보고요.

일단 컬러를 주고요.
그대로 
폰트 사이즈,
라인 하이트,
레터 스페이싱
줍니다.

라인하이트 계산은,
40(폰트사이즈) / 40(라인하이트40) 은 1 이니까 1이고요.

레터스페이싱은 -5%
니까,
-0.05em

으로 표기 하시면 됩니다.

그렇게 하고,

그 다음은,
밑에 p태그 는

css초기 작업때 
이미 미리 작업 을 해줫습니다.

그래서 별도 작업은 없습니다.

그리고 
밑에 버튼 두개인데,

css 스타일링을 하면,

width
height
요까지 버튼 사이즈고

font-size
font-weight
line-height
letter-spacing
폰트 설정

color 폰트 색
background-color 버튼 색

까지 해주고,

근데 width height 스타일링이 안먹는데,
이유는,
display: inline 이라서 그런데,
inline-flex 으로 바꿔주고,
왜냐면 어차피 정렬도 해야하고,
인라인 성격을 가진 플렉스가 좋을 듯해서 이다.
플렉스니까,

justify-content: center;
align-items: center;

해주면 
스타일 적용되면서 정렬도 되었다.

버튼이 
border-radius: 2px;
도 있으니 적용해주고,

fill 버튼은,
색이 다른거 확인하고,

클래스로,

.fill-button .inverted {
    해주고,
    백그라운드 컬러,
    컬러 지정해주면 된다.
}

여기까지,

기본 스타일링은 했고,

---

이제,
정밀하게,
전체적인 
가운데 정렬이라든지 이런거 
해주면 
한 섹션이 끝이 난다.
--
일단,

전체적으로
요소들이 가운데 정렬이니,
전체에 스타일링 을 먹히면 되니까,
section요소 즉, .landing 에다가,
text-align 센터 주면 되겠죠.

그리고,

글자간 간격을 띄워야 되니까,

시안을 보면
간격이 있을껀데,

24px 
20px 
이렇게 되있다,

밑에 만 주면 간격이 벌어 지니까,
margin-bottom: 24px;

margin-bottom: 20px;

-

버튼도 
아래 간격이 필요하니,

.landing 에 .button-group {
    display: flex;
    justify-content: center;
    align-items: center;

}

해주고,

버튼 사이에 간격이 필요하니까,

왼쪽 버튼한테만 
마진-right 주면된다.

선택자는 , 뭐,

.landing .button-group .fill-button:first-child {
    해서 첫번쨰 자식 으로 선택하고,
    margin-right: 8px;

}

그리고,

지금 섹션 전체 화면 세로 길이가 긴데,

시안 확인해보면,

위에 154px 
아래 154px 

즉, 위아래로 154px 씩 주면된다.

그렇게 지금
있는데,

아니면,

지금 섹션 전체 사이즈가,
320px
568px
인데

아이폰 사이즈긴 한데,

아무튼

디자인 의도가, 지금,
전체 사이즈에 패딩을 먹이라는건지,
아니면,
그냥 뷰포트 전체만큼 꽉 채워달라는건지,
를 
파악 해야 하는거고,

뷰포트 만큼만 꽉 채운다 했을떄,

지금
태그 작명 클래스 가
부트 스트랩 이 설정 되있기 떄매,

.container
밑에
.row
밑에 
.col-12 

이렇게 작명 되있는건,
이구조는 부트 스트랩 그리드 레이아웃 구조를
적용해논거라 건들면 안되고,
특히, 애네 한테,
width, height, padding 양옆 , margin 양옆 은 절대 건들면 안된다.
부트 스트랩 그리드 시스템 설정값이 이 다 꺠지기 떄문임. 
여튼,

그러면,

지금 뷰포트로 작업하는건,

.landing 한테 주면,
안에 요소들을 세로 정렬하는게 번거롭다.

그러면

부모 를 하나 만들고,
즉 ,껍데기 div 를 걍 하나 더 만들고,
그안에
다 넣고 작업하면 된다.

col-12 
밑에 요소들 잘라내기해놓고,

<div class="landing-content">
    이 아래 다 붙여넣고,

landing-content 애한테 값을 주면 되겠죠.
애는 걍 세로 정렬만 세팅 해주는 애다.

.landing-content {
    width: 100% 
    height: 100 vh;

}

이렇게까지하고 보면,

지금 
.landing도 사이즈가 
늘어나있는데,
이유는 
별로 사이즈를 지정하지 않아서,
자식 크기가 적용된거고,
.landing-content 가 백프로씩 먹여줘서 그런거고,

.landing-content
는 이제
가운데 정렬 하면된다.

display:flex;
flex-direction:column;  세로 정렬 이니까,

무조건 한줄로 정렬 할꺼니 
플렉스 랩을 필요없고,

justify-content: conter;
해주면 

위에 붙어있던,
요소 애들이
중간 정렬됨.

여기까지,

모바일에 부분중
첫번쨰 섹션을 다 완성은 하였다.

---

데스크 탑 으로 넘어가 
작업을 해주면 된다.

브레이크 포인트는,
즉, 뷰포트 사이즈가 768px 넘어가면 데스크 탑이다.

데스크탑 시안 사이즈를 만들어 주면 된다.

--

타이틀은 
폰트가
사이즈 70
라인하이트 72

니까,

미디어 쿼리 768가서,
.landing-title {
    font-size: 70px;
    line-height: 1.0285714286; 
    72 / 70  이니까 

}

렌딩 디스크립션 클래스는 
폰트사이즈
바뀐건 없다.

넘어가고 ,

--

버튼 보면,

width 160
height 50 
이라서,

미디어쿼리로 가서
.fill-button {
    width: 160px;
    height: 56px;

}

그리고,

버튼 폰트도 보면,

사이즈 18
라인하이트 28 

이니까,

바꾸면된다.

.fill-button {
    width: 160px;
    height: 56px;
    font-size: 18px;
    line-height: 1.55555556;
}

--

그리고,

간격 조절.

요소간
마진 바텀 업데이트 해주면된다.



.landing-title {
    font-size: 70px;
    line-height: 1.0285714286; 
    margin-bottom: 32px;

}


.landing-desc {
    margin-bottom: 32px;
}

--

아 
버튼 사이 간격도,
16px 로 바꿨으니 변경,

.landing .botton-group .fill-button:first-child {
  margin-right: 16px;
}


--

\그리고 

화면 위 아래 
컨텐츠 간격도 변경 되었다.

.landing-content {
    height: auto;
    auto 는 자기자식 길이만큼 먹는것임.

    padding: 120px 0;

}

---
여기까지 
탑_섹션
기본 시안 은 완성이고,

---

인터렉션 추가를 해보자면,

버튼 호버시 
오페시티 50%
줘보자,

.fill-button:hover {
    opacity: 0.5;

}

주고,

트랜지션까지 추가해주면,

.fill-button {
    아래에 그냥 추가 한다 치면,
    transition: opacity 300ms ease-in-out;
}

마무리.
---




